from datetime import datetime

from peewee import IntegrityError

from database.models import db, Comments
from keyboards.inline.comments_keyboard import gen_comments_keyboard, gen_add_comment_keyboard
from loader import bot
from states.user import UserState


note_id = 0


@bot.callback_query_handler(func=lambda call: call.data.startswith('comments_'))
def view_comments(call):
    with db.atomic():
        note_id = call.data.split('_')[1]
        comments = Comments.select().where(
                       (Comments.note_id == note_id) &
                       (Comments.is_approved == True)
                   ).order_by(Comments.created_at.desc())
    if comments:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        comments_text = "\n\n\n".join(
            f"üë§ @{comment.created_by.username}\n"
            f"üìÖ <i>{comment.created_at.strftime('%d.%m.%Y %H:%M')}</i>\n\n"
            f"üí¨ {comment.comment}"
            for comment in comments
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        message_text = f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–Ω—Å–ø–µ–∫—Ç—É:\n\n{comments_text}"
        bot.send_message(call.message.chat.id,
                         text=message_text,
                         parse_mode='HTML',
                         reply_markup=gen_comments_keyboard(note_id))

    else:
        bot.send_message(call.message.chat.id,
                         '<i>üí§ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</i>',
                         parse_mode='HTML',
                         reply_markup=gen_comments_keyboard(note_id))

    bot.delete_message(call.message.chat.id, call.message.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('add_comment_'))
def add_comment(call):
    global note_id
    note_id = call.data.split('_')[2]
    bot.set_state(call.from_user.id, UserState.add_comments)
    bot.send_message(call.message.chat.id,
                     '–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å.\n\n'
                     '‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> ‚ö†Ô∏è <i>–¢–æ, —á—Ç–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å, —Å—Ä–∞–∑—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. '
                     '–ò–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è.</i>', parse_mode='HTML')
    bot.delete_message(call.message.chat.id, call.message.id)


@bot.message_handler(state=UserState.add_comments)
def save_comments(message):
    global note_id
    try:
        with db.atomic():
            Comments.create(
                note_id=note_id,
                comment=message.text,
                created_at=datetime.now(),
                created_by=message.from_user.id,
            )
        bot.send_message(message.chat.id,
                         '‚åõ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. '
                         '–û–Ω –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è, –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.',
                         reply_markup=gen_add_comment_keyboard(note_id))
    except IntegrityError:
        bot.send_message(message.chat.id,
                         'üö´ –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.',
                         reply_markup=gen_add_comment_keyboard(note_id))
    finally:
        bot.delete_message(message.chat.id, message.id)
        bot.delete_message(message.chat.id, message.id - 1)

